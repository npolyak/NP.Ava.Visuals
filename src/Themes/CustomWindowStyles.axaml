<!-- (c) Nick Polyak 2021 - http://awebpros.com/
      License: MIT License (https://opensource.org/licenses/MIT)
 
      short overview of copyright rules:
      1. you can use this framework in any commercial or non-commercial
         product as long as you retain this copyright message
      2. Do not blame the author of this software if something goes wrong.
 
      Also, please, mention this software in any documentation for the
      products that use it.
-->

<Styles xmlns="https://github.com/avaloniaui"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:behaviors="clr-namespace:NP.Ava.Visuals.Behaviors"
        xmlns:converters="clr-namespace:NP.Ava.Visuals.Converters"
        xmlns:controls="clr-namespace:NP.Ava.Visuals.Controls">
	<Styles.Resources>
		<ResourceDictionary>
			<ResourceDictionary.MergedDictionaries>
				<ResourceInclude Source="/Themes/Geometries.axaml"/>
			</ResourceDictionary.MergedDictionaries>
		</ResourceDictionary>
	</Styles.Resources>

    <StyleInclude Source="avares://NP.Ava.Visuals/Themes/ButtonStyles.axaml"/>

	<Style Selector="Path.DefaultCustomWindowMenu">
		<Setter Property="Fill"
				Value="Black"/>
		<Setter Property="Stretch"
				Value="Uniform"/>
		<Setter Property="Width"
				Value="11"/>
		<Setter Property="Height"
				Value="11"/>
	</Style>

  <Styles.Resources>
    <ResourceDictionary>
      <ResourceDictionary.MergedDictionaries>
        <ResourceInclude Source="/Themes/Geometries.axaml"/>
      </ResourceDictionary.MergedDictionaries>
      <converters:BoolToDoubleConverter x:Key="TitleOpacityConverter"
                                        TrueValue="1"
                                        FalseValue="0.5"/>

      <DataTemplate x:Key="DefaultWindowTitleAreaDataTemplate">
        <StackPanel x:Name="PART_IconAndTitleContainer" 
                    Orientation="Horizontal"
                    Background="Transparent"
                    DataContext="{Binding Converter={x:Static converters:FromControlContainerConverter.Instance}}"
                    Opacity="{Binding Path=IsActive, 
                                      Converter={StaticResource TitleOpacityConverter}}">
          <StackPanel.ContextMenu>
            <ContextMenu IsEnabled="True"
						 Foreground="{Binding $parent[Window].MenuForeground}"
                         DataContext="{Binding Path=Parent.Parent.DataContext, RelativeSource={RelativeSource Self}}">
              <MenuItem Header="Restore"
                        IsEnabled="{Binding Path=CanRestore}"
                        behaviors:CallAction.TheEvent="{x:Static MenuItem.ClickEvent}"
                        behaviors:CallAction.MethodName="Restore">
                <MenuItem.Icon>
                  <Path Data="{StaticResource RestoreIcon}"
						behaviors:ClassesBehavior.TheClasses="{Binding $parent[Window].MenuPathClasses}"/>
                </MenuItem.Icon>
              </MenuItem>
              <MenuItem Header="Maximize"
                        IsEnabled="{Binding Path=CanMaximize}"
                        behaviors:CallAction.TheEvent="{x:Static MenuItem.ClickEvent}"
                        behaviors:CallAction.MethodName="Maximize">
                <MenuItem.Icon>
                  <Path Data="{StaticResource MaximizeIcon}"
						behaviors:ClassesBehavior.TheClasses="{Binding $parent[Window].MenuPathClasses}"/>
                </MenuItem.Icon>
              </MenuItem>
              <MenuItem Header="Minimize"
                        behaviors:CallAction.TheEvent="{x:Static MenuItem.ClickEvent}"
                        behaviors:CallAction.MethodName="Minimize">
                <MenuItem.Icon>
                  <Path Data="{StaticResource MinimizeIcon}"
						behaviors:ClassesBehavior.TheClasses="{Binding $parent[Window].MenuPathClasses}"
                        VerticalAlignment="Center"
                        Height="3"/>
                </MenuItem.Icon>
              </MenuItem>
              <MenuItem Header="Close"
                        behaviors:CallAction.TheEvent="{x:Static MenuItem.ClickEvent}"
                        behaviors:CallAction.MethodName="Close"
                        FontWeight="Bold"
                        IsVisible="{Binding Path=CanClose}">
                <MenuItem.Icon>
                  <Path Data="{StaticResource CloseIcon}"
						behaviors:ClassesBehavior.TheClasses="{Binding $parent[Window].MenuPathClasses}"/>
                </MenuItem.Icon>
              </MenuItem>
            </ContextMenu>
          </StackPanel.ContextMenu>
          <Image Source="{Binding Path=CustomHeaderIcon}"
                 VerticalAlignment="Center"
                 Stretch="Uniform"
                 IsVisible="{Binding Path=CustomHeaderIcon, 
                                     Converter={x:Static ObjectConverters.IsNotNull}}"
                 behaviors:CallAction.TheEvent="{x:Static InputElement.DoubleTappedEvent}"
                 behaviors:CallAction.MethodName="Close"
                 IsEnabled="{Binding Path=CanClose}"
                 Width="{Binding Path=CustomHeaderIconWidth}"
                 Height="{Binding Path=CustomHeaderIconHeight}"
                 Margin="{Binding Path=CustomHeaderIconMargin}"/>
          <TextBlock x:Name="TheTitle"
                     IsVisible="{Binding Path=Title, 
                                         Converter={x:Static StringConverters.IsNotNullOrEmpty}}"
                     Text="{Binding Path=Title}"
                     Margin="{Binding Path=TitleMargin}"
                     behaviors:ClassesBehavior.TheClasses="{Binding Path=TitleClasses}"/>
        </StackPanel>
      </DataTemplate>

      <ControlTemplate x:Key="CustomWindowButtonsTemplate">
        <StackPanel x:Name="WindowButtonsPanel"
                    Orientation="Horizontal">
          <Button x:Name="MinimizeButton"
				  behaviors:ClassesBehavior.TheClasses="{Binding $parent[Window].WindowButtonClasses}"
                  controls:AttachedProperties.IconData="{StaticResource MinimizeIcon}"
                  controls:AttachedProperties.IconHeight="2.1"
				  controls:AttachedProperties.IconMargin="5,15,5,5"
                  controls:AttachedProperties.IconStretch="Fill"
                  behaviors:CallAction.MethodName="Minimize"/>
          <Button x:Name="RestoreButton"
				  behaviors:ClassesBehavior.TheClasses="{Binding $parent[Window].WindowButtonClasses}"
                  IsVisible="{Binding Path=CanRestore}"
                  controls:AttachedProperties.IconData="{StaticResource RestoreIcon}"
                  behaviors:CallAction.MethodName="Restore"/>
          <Button x:Name="MaximizeButton"
				  behaviors:ClassesBehavior.TheClasses="{Binding $parent[Window].WindowButtonClasses}"
                  IsVisible="{Binding Path=CanMaximize}"
                  controls:AttachedProperties.IconData="{StaticResource MaximizeIcon}"
                  behaviors:CallAction.MethodName="Maximize"/>
          <Button x:Name="CloseButton"
				  behaviors:ClassesBehavior.TheClasses="{Binding $parent[Window].WindowButtonClasses}"
                  IsVisible="{Binding Path=CanClose}"
                  controls:AttachedProperties.IconData="{StaticResource CloseIcon}"
                  behaviors:CallAction.MethodName="Close"/>
        </StackPanel>
      </ControlTemplate>
    </ResourceDictionary>
  </Styles.Resources>

	<Style Selector="TextBlock.DefaultWindowTitle">
		<Setter Property="Foreground"
				Value="Black"/>
		<Setter Property="FontFamily"
				Value="Calibri"/>
		<Setter Property="FontSize"
				Value="16"/>
		<Setter Property="LineHeight"
				Value="{Binding Path=$self.FontSize}"/>
		<Setter Property="VerticalAlignment"
				Value="Center"/>
		<Setter Property="HorizontalAlignment"
				Value="Left"/>
	</Style>
	
  <Style Selector=":is(controls|CustomWindow)">
	  <Setter Property="MenuPathClasses"
			  Value="DefaultCustomWindowMenu"/>
	  <Setter Property="WindowButtonClasses"
			  Value="WindowIconButton IconButton"/>
    <Setter Property="ResizeMargin"
            Value="5"/>
	  <Setter Property="MenuForeground"
			  Value="Black"/>
    <Setter Property="BorderThickness"
            Value="1"/>
	<Setter Property="Focusable"
			Value="False"/>
    <Setter Property="SystemDecorations"
            Value="None"/>
    <Setter Property="MinWidth"
        Value="100"/>
    <Setter Property="MinHeight"
            Value="100"/>
    <Setter Property="TitleClasses"
            Value="DefaultWindowTitle"/>
    <Setter Property="BorderBrush"
            Value="LightGray"/>
    <Setter Property="ButtonsAreaTemplate"
            Value="{StaticResource CustomWindowButtonsTemplate}"/>
    <!--<Setter Property="TitleAreaContent"
            Value="{Binding RelativeSource={RelativeSource Self}}"/>-->
    <Setter Property="TitleAreaContent"
            Value="{Binding RelativeSource={RelativeSource Self}}"/>
    <Setter Property="TitleAreaContentTemplate"
            Value="{StaticResource DefaultWindowTitleAreaDataTemplate}" />
    <Setter Property="Icon"
            Value="{Binding Path=CustomHeaderIcon,
                            Converter={x:Static converters:ToWindowIconConverter.Instance},
                            RelativeSource={RelativeSource Self}}"/>
    <Setter Property="HeaderTemplate">
      <Setter.Value>
        <ControlTemplate>
          <Grid x:Name="PART_HeaderContainer"
                Height="{Binding Path=HeaderHeight, RelativeSource={RelativeSource AncestorType=controls:CustomWindow}}"
                Background="{Binding Path=HeaderBackground, RelativeSource={RelativeSource AncestorType=controls:CustomWindow}}">
            <Grid VerticalAlignment="Center">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="Auto"/>
              </Grid.ColumnDefinitions>

              <controls:AvaloniaContentPresenter x:Name="PART_HeaderTitleAreaContentPresenter"
                                                 RealContent="{Binding Path=TitleAreaContent,
                                                                       RelativeSource={RelativeSource AncestorType=controls:CustomWindow}}"
                                                 ContentTemplate="{Binding Path=TitleAreaContentTemplate, 
                                                                           RelativeSource={RelativeSource AncestorType=controls:CustomWindow}}"
                                                 HorizontalAlignment="Left"
                                                 VerticalAlignment="Stretch"
												 Focusable="False"/>
              
              <ContentPresenter HorizontalAlignment="Stretch"
                                VerticalAlignment="Stretch"
                                Grid.Column="1"
				                Focusable="False"
                                Content="{Binding Path=HeaderContent, 
                                                RelativeSource={RelativeSource AncestorType=controls:CustomWindow}, 
                                                TargetNullValue='', 
                                                FallbackValue=''}"
                                ContentTemplate="{Binding Path=HeaderContentTemplate, RelativeSource={RelativeSource AncestorType=controls:CustomWindow}}"/>

              <TemplatedControl x:Name="TheButtonsAreaTemplate" 
								Grid.Column="2"
								Focusable="False"
                                HorizontalAlignment="Right"
                                behaviors:HandleEventBehavior.TheEvent="{x:Static InputElement.DoubleTappedEvent}"
                                Template="{Binding Path=ButtonsAreaTemplate, RelativeSource={RelativeSource AncestorType=controls:CustomWindow}}"
                                DataContext="{Binding RelativeSource={RelativeSource AncestorType=controls:CustomWindow}}"/>
            </Grid>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Template">
      <ControlTemplate>
        <Panel>
          <Border Name="PART_TransparencyFallback"
                  IsHitTestVisible="False" 
                  BorderBrush="{TemplateBinding BorderBrush}"
                  BorderThickness="{TemplateBinding BorderThickness}"/>
          <Panel Background="Transparent" Margin="{TemplateBinding WindowDecorationMargin}" />
          <VisualLayerManager>
            <Grid>
              <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="*"/>
              </Grid.RowDefinitions>
              <TemplatedControl x:Name="PART_HeaderControl"
								Focusable="False"
                                Template="{Binding Path=HeaderTemplate, RelativeSource={RelativeSource TemplatedParent}}"
                                IsVisible="{Binding Path=IsCustomHeaderVisible, RelativeSource={RelativeSource AncestorType=controls:CustomWindow}}"/>
              <Panel x:Name="HeaderSeparator"
                     HorizontalAlignment="Stretch"
                     Grid.Row="1"
                     Height="{Binding Path=HeaderSeparatorHeight, RelativeSource={RelativeSource AncestorType=controls:CustomWindow}}"
                     Background="{Binding Path=HeaderSeparatorBrush, RelativeSource={RelativeSource AncestorType=controls:CustomWindow}}"/>


              <Grid Grid.Row="2">
                <Border x:Name="BackgroundBorder"
						Focusable="False"
                        Background="{TemplateBinding Background}"
                        IsHitTestVisible="False"
                        BorderThickness="{Binding Path=BorderThickness, 
                                                  Converter={x:Static converters:NoTopBorderThicknessConverter.Instance},
                                                  RelativeSource={RelativeSource TemplatedParent}}"
                        BorderBrush="{x:Null}"/>

                <Grid Margin="{Binding Path=BorderThickness,
                                         Converter={x:Static converters:NoTopBorderThicknessConverter.Instance},
                                         RelativeSource={RelativeSource TemplatedParent}}">
                  <ContentPresenter Name="PART_ContentPresenter"
                                    ContentTemplate="{TemplateBinding ContentTemplate}"
                                    Content="{TemplateBinding Content}"
                                    Margin="{TemplateBinding Padding}"
                                    HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                    VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
									Focusable="False"/>
                </Grid>
              </Grid>

              <Border x:Name="WindowBorder"
                      Grid.RowSpan="3"
                      Background="{x:Null}"
                      IsHitTestVisible="False"
                      BorderThickness="{TemplateBinding BorderThickness}"
                      BorderBrush="{Binding Path=BorderBrush, RelativeSource={RelativeSource TemplatedParent}}"
					  Focusable="False"/>
              
              <Grid x:Name="ResizeGrid"
                    Grid.RowSpan="3" Margin="{Binding Path=BorderThickness,
                                         Converter={x:Static converters:NoTopBorderThicknessConverter.Instance},
                                         RelativeSource={RelativeSource TemplatedParent}}">
                <Grid.RowDefinitions>
                  <RowDefinition Height="{Binding Path=ResizeMargin, 
                                                    Converter={x:Static converters:ToGridLengthConverter.Instance},
                                                    RelativeSource={RelativeSource TemplatedParent}}"/>
                  <RowDefinition Height="*"/>
                  <RowDefinition Height="{Binding Path=ResizeMargin, 
                                                    Converter={x:Static converters:ToGridLengthConverter.Instance},
                                                    RelativeSource={RelativeSource TemplatedParent}}"/>
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="{Binding Path=ResizeMargin, 
                                                      Converter={x:Static converters:ToGridLengthConverter.Instance},
                                                      RelativeSource={RelativeSource TemplatedParent}}"/>
                  <ColumnDefinition Width="*"/>
                  <ColumnDefinition Width="{Binding Path=ResizeMargin, 
                                                      Converter={x:Static converters:ToGridLengthConverter.Instance},
                                                      RelativeSource={RelativeSource TemplatedParent}}"/>
                </Grid.ColumnDefinitions>
                <Border Name="TopLeft" Background="Transparent"/>
                <Border Name="TopRight" Background="Transparent" Grid.Column="2" />
                <Border Name="BottomLeft" Background="Transparent" Grid.Row="2" />
                <Border Name="BottomRight" Background="Transparent"  Grid.Row="2" Grid.Column="2"/>
                <Border Name="Top" Background="Transparent" Grid.Column="1" />
                <Border Name="Right" Background="Transparent" Grid.Row="1"  Grid.Column="2" />
                <Border Name="Bottom" Background="Transparent" Grid.Row="2" Grid.Column="1"  />
                <Border Name="Left" Background="Transparent"  Grid.Row="1" />
              </Grid>
            </Grid>
          </VisualLayerManager>
        </Panel>
      </ControlTemplate>
    </Setter>
  </Style>

	<Style Selector=":is(controls|CustomWindow).PlainCustomWindow">
		<Setter Property="Title"
				Value="My Test Window"/>
		<Setter Property="HeaderBackground"
				Value="White"/>
		<Setter Property="HeaderHeight"
				Value="30"/>
		<Setter Property="HeaderSeparatorHeight"
				Value="2"/>
		<Setter Property="HeaderSeparatorBrush"
				Value="Black"/>
		<Setter Property="CustomHeaderIcon"
				Value="/Assets/avalonia-32.png"/>
		<Setter Property="CustomHeaderIconMargin"
				Value="5,5,0,5"/>
		<Setter Property="TitleMargin"
				Value="5"/>
		<Setter Property="Background" Value="White"/>
		<Setter Property="Foreground" Value="Black"/>
	</Style>
</Styles>
